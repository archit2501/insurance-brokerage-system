#!/usr/bin/env pwsh
# ============================================
# FULLY AUTOMATED DEPLOYMENT
# ============================================
# This script does EVERYTHING - you just provide Turso credentials once

$ErrorActionPreference = "Stop"

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "  FULLY AUTOMATED VERCEL DEPLOYMENT" -ForegroundColor Cyan
Write-Host "========================================`n" -ForegroundColor Cyan

Write-Host "This script will handle EVERYTHING automatically!" -ForegroundColor Green
Write-Host "You only need to provide your Turso credentials once.`n" -ForegroundColor White

# ============================================
# STEP 0: Check prerequisites
# ============================================
Write-Host "[0/7] Checking prerequisites..." -ForegroundColor Yellow

# Check Node.js
try {
    $nodeVersion = node --version
    Write-Host "  ✓ Node.js: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "  ✗ Node.js not found! Please install Node.js first." -ForegroundColor Red
    exit 1
}

# Check npm
try {
    $npmVersion = npm --version
    Write-Host "  ✓ npm: v$npmVersion" -ForegroundColor Green
} catch {
    Write-Host "  ✗ npm not found!" -ForegroundColor Red
    exit 1
}

# Check git
try {
    $gitVersion = git --version
    Write-Host "  ✓ $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "  ✗ Git not found! Please install Git first." -ForegroundColor Red
    exit 1
}

Write-Host "`n✅ All prerequisites met!`n" -ForegroundColor Green

# ============================================
# STEP 1: Get Turso Credentials
# ============================================
Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host "[1/7] Turso Database Credentials" -ForegroundColor Yellow
Write-Host "════════════════════════════════════════════════════════════════`n" -ForegroundColor Cyan

Write-Host "I need your Turso credentials to automate everything." -ForegroundColor White
Write-Host "Don't have them? Get them here: " -NoNewline -ForegroundColor Gray
Write-Host "https://turso.tech/app" -ForegroundColor Cyan
Write-Host ""
Write-Host "Quick guide:" -ForegroundColor White
Write-Host "  1. Login to Turso" -ForegroundColor Gray
Write-Host "  2. Select your database" -ForegroundColor Gray
Write-Host "  3. Copy Connection URL (libsql://...)" -ForegroundColor Gray
Write-Host "  4. Create/Copy Auth Token`n" -ForegroundColor Gray

$tursoUrl = Read-Host "TURSO_CONNECTION_URL (libsql://...)"
if ([string]::IsNullOrWhiteSpace($tursoUrl) -or $tursoUrl -notmatch "^libsql://") {
    Write-Host "`n✗ Invalid Turso URL! Must start with libsql://" -ForegroundColor Red
    exit 1
}
Write-Host "  ✓ Connection URL received" -ForegroundColor Green

Write-Host ""
$tursoToken = Read-Host "TURSO_AUTH_TOKEN"
if ([string]::IsNullOrWhiteSpace($tursoToken)) {
    Write-Host "`n✗ Auth token is required!" -ForegroundColor Red
    exit 1
}
Write-Host "  ✓ Auth token received" -ForegroundColor Green

Write-Host "`n✅ Credentials validated!`n" -ForegroundColor Green

# ============================================
# STEP 2: Generate Secrets
# ============================================
Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host "[2/7] Generating Secure Secrets" -ForegroundColor Yellow
Write-Host "════════════════════════════════════════════════════════════════`n" -ForegroundColor Cyan

try {
    $secret = node -e "console.log(require('crypto').randomBytes(48).toString('base64'))" 2>&1 | Select-Object -Last 1
    $secret = $secret.Trim()
    Write-Host "  ✓ Generated BETTER_AUTH_SECRET" -ForegroundColor Green
} catch {
    Write-Host "  ✗ Failed to generate secret: $_" -ForegroundColor Red
    exit 1
}

Write-Host "`n✅ Secrets generated!`n" -ForegroundColor Green

# ============================================
# STEP 3: Create .env File
# ============================================
Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host "[3/7] Creating Environment File" -ForegroundColor Yellow
Write-Host "════════════════════════════════════════════════════════════════`n" -ForegroundColor Cyan

$envContent = @"
# Auto-generated by automated deployment script
# Generated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

TURSO_CONNECTION_URL=$tursoUrl
TURSO_AUTH_TOKEN=$tursoToken
BETTER_AUTH_SECRET=$secret
BETTER_AUTH_URL=http://localhost:3000
NODE_ENV=development
"@

try {
    $envContent | Out-File -FilePath ".env" -Encoding utf8 -Force
    Write-Host "  ✓ .env file created" -ForegroundColor Green
} catch {
    Write-Host "  ✗ Failed to create .env: $_" -ForegroundColor Red
    exit 1
}

Write-Host "`n✅ Environment configured!`n" -ForegroundColor Green

# ============================================
# STEP 4: Commit Changes
# ============================================
Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host "[4/7] Committing Changes to Git" -ForegroundColor Yellow
Write-Host "════════════════════════════════════════════════════════════════`n" -ForegroundColor Cyan

try {
    git add .
    $hasChanges = git status --porcelain
    if ($hasChanges) {
        git commit -m "Automated deployment setup - $(Get-Date -Format 'yyyy-MM-dd HH:mm')" | Out-Null
        Write-Host "  ✓ Changes committed" -ForegroundColor Green
    } else {
        Write-Host "  ✓ No new changes to commit" -ForegroundColor Green
    }
} catch {
    Write-Host "  ⚠ Git commit skipped (may not have changes)" -ForegroundColor Yellow
}

Write-Host "`n✅ Git updated!`n" -ForegroundColor Green

# ============================================
# STEP 5: Install/Check Vercel CLI
# ============================================
Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host "[5/7] Setting Up Vercel CLI" -ForegroundColor Yellow
Write-Host "════════════════════════════════════════════════════════════════`n" -ForegroundColor Cyan

$vercelCmd = Get-Command vercel -ErrorAction SilentlyContinue
if (-not $vercelCmd) {
    Write-Host "  Installing Vercel CLI globally..." -ForegroundColor Gray
    Write-Host "  (This may take 30-60 seconds)`n" -ForegroundColor Gray
    
    npm install -g vercel 2>&1 | Out-Null
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "  ✗ Failed to install Vercel CLI" -ForegroundColor Red
        Write-Host "`nPlease install manually: npm install -g vercel" -ForegroundColor Yellow
        exit 1
    }
    Write-Host "  ✓ Vercel CLI installed" -ForegroundColor Green
} else {
    Write-Host "  ✓ Vercel CLI already installed" -ForegroundColor Green
}

Write-Host "`n✅ Vercel CLI ready!`n" -ForegroundColor Green

# ============================================
# STEP 6: Deploy to Vercel
# ============================================
Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host "[6/7] Deploying to Vercel" -ForegroundColor Yellow
Write-Host "════════════════════════════════════════════════════════════════`n" -ForegroundColor Cyan

Write-Host "Starting deployment..." -ForegroundColor White
Write-Host "(You may be prompted to login to Vercel if not already logged in)`n" -ForegroundColor Gray

# Set environment variables
$env:TURSO_CONNECTION_URL = $tursoUrl
$env:TURSO_AUTH_TOKEN = $tursoToken
$env:BETTER_AUTH_SECRET = $secret
$env:NODE_ENV = "production"

# Create vercel.json if not exists
if (-not (Test-Path "vercel.json")) {
    $vercelConfig = @"
{
  "buildCommand": "npm run build",
  "framework": "nextjs",
  "installCommand": "npm install",
  "env": {
    "TURSO_CONNECTION_URL": "$tursoUrl",
    "TURSO_AUTH_TOKEN": "$tursoToken",
    "BETTER_AUTH_SECRET": "$secret",
    "NODE_ENV": "production"
  }
}
"@
    $vercelConfig | Out-File -FilePath "vercel.json" -Encoding utf8 -Force
}

# Deploy with environment variables
Write-Host "Executing: vercel --prod --yes`n" -ForegroundColor Gray

$deployOutput = vercel --prod --yes 2>&1

if ($LASTEXITCODE -eq 0) {
    Write-Host "`n  ✓ Deployment successful!" -ForegroundColor Green
    
    # Extract URL from output
    $url = $deployOutput | Select-String -Pattern "https://.*\.vercel\.app" | Select-Object -First 1
    if ($url) {
        $deployUrl = $url.Matches.Value
        Write-Host "`n  🌐 Your app is live at:" -ForegroundColor Cyan
        Write-Host "     $deployUrl`n" -ForegroundColor White -BackgroundColor DarkGreen
    }
} else {
    Write-Host "`n  ✗ Deployment failed!" -ForegroundColor Red
    Write-Host "`nError output:" -ForegroundColor Yellow
    Write-Host $deployOutput -ForegroundColor Gray
    Write-Host "`nTry manual deployment: https://vercel.com/new" -ForegroundColor Yellow
    exit 1
}

Write-Host "`n✅ Deployed to Vercel!`n" -ForegroundColor Green

# ============================================
# STEP 7: Configure BETTER_AUTH_URL
# ============================================
Write-Host "════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host "[7/7] Final Configuration" -ForegroundColor Yellow
Write-Host "════════════════════════════════════════════════════════════════`n" -ForegroundColor Cyan

if ($deployUrl) {
    Write-Host "⚠️  ONE FINAL STEP REQUIRED:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Your app is deployed, but you need to add BETTER_AUTH_URL:" -ForegroundColor White
    Write-Host ""
    Write-Host "1. Go to: https://vercel.com/dashboard" -ForegroundColor Gray
    Write-Host "2. Select your project" -ForegroundColor Gray
    Write-Host "3. Go to: Settings → Environment Variables" -ForegroundColor Gray
    Write-Host "4. Add variable:" -ForegroundColor Gray
    Write-Host "   Name:  BETTER_AUTH_URL" -ForegroundColor Cyan
    Write-Host "   Value: $deployUrl" -ForegroundColor Cyan
    Write-Host "5. Click 'Redeploy'`n" -ForegroundColor Gray
    
    Write-Host "Or run this command:" -ForegroundColor White
    Write-Host "   vercel env add BETTER_AUTH_URL production`n" -ForegroundColor Cyan
    
    # Try to add it automatically
    Write-Host "Attempting to add BETTER_AUTH_URL automatically..." -ForegroundColor Gray
    $addEnv = Read-Host "Do you want me to try? (y/n)"
    
    if ($addEnv -eq "y") {
        Write-Host $deployUrl | vercel env add BETTER_AUTH_URL production
        if ($LASTEXITCODE -eq 0) {
            Write-Host "  ✓ BETTER_AUTH_URL added!" -ForegroundColor Green
            Write-Host "  Redeploying..." -ForegroundColor Gray
            vercel --prod --yes | Out-Null
            Write-Host "  ✓ Redeployed with updated configuration!" -ForegroundColor Green
        }
    }
}

# ============================================
# SUCCESS!
# ============================================
Write-Host ""
Write-Host "╔════════════════════════════════════════════════════════════════╗" -ForegroundColor Green
Write-Host "║                                                                ║" -ForegroundColor Green
Write-Host "║              🎉 DEPLOYMENT COMPLETE! 🎉                        ║" -ForegroundColor Green
Write-Host "║                                                                ║" -ForegroundColor Green
Write-Host "╚════════════════════════════════════════════════════════════════╝`n" -ForegroundColor Green

Write-Host "Your Insurance Brokerage System is now LIVE!`n" -ForegroundColor White

if ($deployUrl) {
    Write-Host "🌐 App URL:" -ForegroundColor Cyan
    Write-Host "   $deployUrl`n" -ForegroundColor White -BackgroundColor DarkBlue
}

Write-Host "📋 Test Credentials:" -ForegroundColor Cyan
Write-Host "   Email:    testuser@insurancebrokerage.com" -ForegroundColor White
Write-Host "   Password: Test@123456`n" -ForegroundColor White

Write-Host "✅ What was automated:" -ForegroundColor Green
Write-Host "   • Generated secure secrets" -ForegroundColor Gray
Write-Host "   • Created .env file" -ForegroundColor Gray
Write-Host "   • Committed changes to Git" -ForegroundColor Gray
Write-Host "   • Installed Vercel CLI" -ForegroundColor Gray
Write-Host "   • Deployed to Vercel" -ForegroundColor Gray
Write-Host "   • Configured environment variables`n" -ForegroundColor Gray

Write-Host "🎯 Next Steps:" -ForegroundColor Yellow
Write-Host "   1. Visit your app URL" -ForegroundColor White
Write-Host "   2. Test login/registration" -ForegroundColor White
Write-Host "   3. Share URL with your client!`n" -ForegroundColor White

Write-Host "════════════════════════════════════════════════════════════════`n" -ForegroundColor Green

Write-Host "🚀 Enjoy your deployed app!" -ForegroundColor Green
Write-Host ""
